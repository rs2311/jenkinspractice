ip routing
!
{##### Task 1 #####}
{##### Uplink and Downlink Ethernet Configuration #####}
{##### Applicable for Spine and Leaf #####}
{% if Device[SW]['device_role'] == 'spine' or 'leaf' %}
{% for entry in Devices[SW]['ethernet'] %}
interface eth {{ entry['int_num'] }}
   no switchport
   ip address {{ entry['ip_address'] }}
   des {{ entry['des'] }}
   ip ospf area 0.0.0.0
{% endfor %}
!
{##### Task 2 #####}
{# Loopback Configuration #}
{##### Applicable for Spine and Leaf #####}
{% for entry in Devices[SW]['loopback'] %}
interface loopback {{ entry['loop_num'] }}
   ip address {{ entry['ip_address'] }}/32
   des {{ entry['des'] }}
   ip ospf area 0.0.0.0
{% endfor %}
!
{##### Task 3 #####}
{# OSPF and BGP enablement and Router ID configuration #}
{##### Applicable for Spine and Leaf #####}
{% for entry in Devices[SW]['loopback'] %}
{% if entry['loop_num'] == '0' %}
router ospf 10
   router-id {{ entry['ip_address'] }}   
!
router bgp 65000
   router-id {{ entry['ip_address'] }}   
{% endif %}
{% endfor %}
!
{##### Task 3 #####}
{# BGP EVPN Configuration #}
{##### Applicable for Spine and Leaf #####}
{% for entry in Devices[SW]['BGP'] %}
router bgp 65000
   neighbor IBGP-EVPN peer group
   neighbor IBGP-EVPN update-source lo 0
   neighbor IBGP-EVPN send-community
   neighbor IBGP-EVPN remote-as 65000
   neighbor {{ entry['nei'] }} peer group IBGP-EVPN
   neighbor {{ entry['nei'] }} description {{ entry['des'] }}   
{% if entry['is_routereflector'] %}
   neighbor IBGP-EVPN route-reflector-client
{% endif %}
   add evpn
      neighbor IBGP-EVPN activate
{% endfor %}
{% endif %}
!
{##### Task 4 #####}
{# VXLAN Configuration #}
{##### Applicable for Leaf #####}
{% if Device[SW]['device_role'] == 'leaf' %}
int vxlan 1
   vxlan source-int lo 1
   vxlan udp-port 4789
!
ip virtual-router mac-address 0c:fd:01:01:01:01
!
{% endif %}

{##### Task 5 #####}
{########## Type5 Routes Classic L3 ########}
{############## Applicable for host ################}

{% if Devices[SW]['device_role'] == 'host' %}
{% for entry in Devices[SW]['customers'] %}
vrf instance {{ entry['cust_name'] }}
   rd {{ entry['cust_id'] }}:{{ Devices[SW]['device_id'] }}
!
ip routing vrf {{ entry['cust_name'] }}
!
{% endfor %}
{% endif %}

{##### Task 6 #####}
{########## Type5 Routes Classic L3 ########}
{############## Applicable for Leaf ################}

{% if Devices[SW]['device_role'] == 'leaf' %}
{% for entry in Devices[SW]['customers'] %}

vrf instance {{ entry['cust_name'] }}
   rd {{ entry['cust_id'] }}:{{ Devices[SW]['device_id'] }}
!
ip routing vrf {{ entry['cust_name'] }}
!
interface loopback{{ entry['cust_id'] }}
   vrf forwarding {{ entry['cust_name'] }}
   ip address {{ entry['l3_loopback_ip'] }}
!
interface Vxlan1
   vxlan vrf {{ entry['cust_name'] }} vni {{ entry['l3_vni'] }}
!
router bgp 65000
!
   vrf {{ entry['cust_name'] }}
   rd {{ entry['cust_id'] }}:{{ Devices[SW]['device_id'] }}
   route-target import evpn {{ entry['cust_id'] }}:{{ entry['cust_id'] }}
   route-target export evpn {{ entry['cust_id'] }}:{{ entry['cust_id'] }}
   redistribute connected
      address-family ipv4
      exit
   exit
exit
{% endfor %}
{% endif %}
!
{###### Task X ##############}
{# Type5 Routes Classic L3 #}
{# Type5 Routes Classic L3 #}
{% if Devices[SW]['device_role'] == 'leaf' %}
{% for entry in Devices[SW]['customers'] %}
{% for vlan_entry in entry['type5_routes'] %}
!
vlan {{ vlan_entry['vlan'] }}
   name {{ vlan_entry['name'] }}
!
interface vlan {{ vlan_entry['vlan'] }}
   vrf forwarding {{ entry['cust_name'] }}
   ip address {{ vlan_entry['subnet'] | ipaddr(1) }}
!
{% endfor %}
{% endfor %}
{% endif %}
!
{# Type2 Routes DataCenter Wide Rack Specfic #}
{% if Devices[SW]['device_role'] == 'leaf' %}
{% for entry in Devices[SW]['customers'] %}
{% for vlan_entry in entry['type2_routes'] %}
!
vlan {{ vlan_entry['vlan'] }}
   name {{ vlan_entry['name'] }}
!
interface vlan {{ vlan_entry['vlan'] }}
   vrf forwarding {{ entry['cust_name'] }}
   ip address virtual {{ vlan_entry['subnet'] | ipaddr(1) }}
!
router bgp 65000
!
   vlan {{ vlan_entry['vlan'] }}
   rd {{ vlan_entry['vlan'] }}:{{ Devices[SW]['device_id'] }}
   route-target import {{ vlan_entry['l2_vni'] }}:{{ vlan_entry['vlan'] }}
   route-target export {{ vlan_entry['l2_vni'] }}:{{ vlan_entry['vlan'] }}
   redistribute learned
   exit
!
interface Vxlan1
   vxlan vlan {{ vlan_entry['vlan'] }} vni {{ vlan_entry['l2_vni'] }}
!
{% endfor %}
{% endfor %}
{% endif %}
!
{########################################################################}
{########################################################################}
{############## Ethernet Configuration towards Host Network #############}


{% if Devices[SW]['device_role'] == 'leaf' or 'host' %}
{% for entry in Devices[SW]['host_ethernet'] %}
interface eth {{ entry['int_num'] }}
   switchport
   switchport mode trunk
   des {{ entry['des'] }}
{% endfor %}
{% endif %}
!






